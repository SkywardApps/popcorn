<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PopcornNetStandard</name>
    </assembly>
    <members>
        <member name="T:Skyward.Popcorn.Expander">
            <summary>
            This is the public interface part for the 'Expander' class.
            The expander will allow you to project from one type to another, dynamically selecting which properties to include and
            which properties to descend into and retrieve (the expansion part).
            
            Types will be mapped implicitly where possible, or you may provide a 'Translator' that handles providing data for a 
            particular property.
            
            This is intended primarily for Api usage so a client can selectively include properties and nested data in their query.
            </summary>
            <summary>
            The expansions algorithms
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.Expander.Skyward#Popcorn#IExpanderInternalConfiguration#Mappings">
            <summary>
            This is the core of the expander.  This registers incoming types (the source of the data) and specifies a 
            single outgoing type that it will be converted to.
            
            It is possible that in the future we may want to provide multiple destination options, primarily for nested 
            entities.  Top-level entities will always need a 'default' outgoing type.
            </summary>
        </member>
        <member name="M:Skyward.Popcorn.Expander.WillExpand(System.Object)">
            <summary>
            Query whether or not a particular object is either a Mapped type or a collection of a Mapped type.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.WillExpandType(System.Type)">
            <summary>
            Query whether or not a particular type is either a Mapped type or a collection of a Mapped type.
            This references a cache for quicker answers.
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.WillExpandTypeInner(System.Type)">
            <summary>
            Query whether or not a particular type is either a Mapped type or a collection of a Mapped type.
            This bypasses the cache, although inner lookups may still use the cache.
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.Expand(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Collections.Generic.HashSet{System.Int32},System.Type)">
            <summary>
            The entry point method for converting a type into its projection and selectively including data.
            This will work on either a Mapped Type or a collection of a Mapped Type.
            This version allows specification of the includes in string format
            </summary>
        </member>
        <member name="M:Skyward.Popcorn.Expander.Expand(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{Skyward.Popcorn.PropertyReference},System.Collections.Generic.HashSet{System.Int32},System.Type)">
            <summary>
            The entry point method for converting a type into its projection and selectively including data.
            This will work on either a Mapped Type or a collection of a Mapped Type.
            This version allows specification of the includes as an IEnumerable of PropertyReferences.
            
            Using anonymous objects works well for the Api use case.  
            </summary>
            <param name="source"></param>
            <param name="context">A context dictionary that will be passed around to all conversion routines.</param>
            <param name="includes"></param>
            <param name="visited"></param>
            <param name="destinationTypeHint">todo: describe destinationTypeHint parameter on Expand</param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.Expand``1(System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            A generic overload that automatically provides the type hint.
            This accepts a string include list of the form "[Prop1,Prop2[SubProp1]]"
            </summary>
            <typeparam name="TDestType"></typeparam>
            <param name="source"></param>
            <param name="includes"></param>
            <param name="context"></param>
            <param name="visited"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.Expand``1(System.Object,System.Collections.Generic.IEnumerable{Skyward.Popcorn.PropertyReference},System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            A generic overload that automatically provides the type hint.
            This optionally accepts a list of PropertyReferences
            </summary>
            <typeparam name="TDestType"></typeparam>
            <param name="source"></param>
            <param name="includes"></param>
            <param name="context"></param>
            <param name="visited"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.Sort(System.Object,System.String,Skyward.Popcorn.SortDirection)">
            <summary>
            The entry point method for sorting an unknown object.
            This will work on either a Mapped Simple Type only.
            </summary>
            <param name="source"></param>
            <param name="sortTarget">The parameter desired to be sorted on.</param>
            <param name="sortDirection">An enumeration of possible options</param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.WillExpandDirect(System.Type)">
            <summary>
            Query if this is a mapped type
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Skyward.Popcorn.Expander.WillExpandDictionary(System.Type)" -->
        <member name="M:Skyward.Popcorn.Expander.WillExpandCollection(System.Type)">
            <summary>
            Query if this is a collection of a mapped type
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.WillExpandBlind(System.Type)">
            <summary>
            Query if this is a type that can be expanded with no projected type, i.e. blind
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.ExpandDirectObject(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{Skyward.Popcorn.PropertyReference},System.Collections.Generic.HashSet{System.Int32},System.Type)">
            <summary>
            Expand a mapped type
            </summary>
            <param name="source"></param>
            <param name="context"></param>
            <param name="includes"></param>
            <param name="visited">todo: describe visited parameter on ExpandDirectObject</param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.AuthorizeValue(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object)">
            <summary>
            Test if an object is authorized in a given context, from the given source.
            Source may be an object (if value was from a property) or the collection 
            (if value is contained within it).
            </summary>
            <param name="source"></param>
            <param name="context"></param>
            <param name="valueToAssign"></param>
            <returns>True if authorized, false if rejected</returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.ExpandBlindDictionary(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{Skyward.Popcorn.PropertyReference},System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Take a dictionarhy, and transfer properties requested into a dictionary
            </summary>
            <param name="source"></param>
            <param name="context"></param>
            <param name="includes"></param>
            <param name="visited"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.ExpandBlindObject(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{Skyward.Popcorn.PropertyReference},System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Take a complex object, and transfer properties requested into a dictionary
            </summary>
            <param name="source"></param>
            <param name="context"></param>
            <param name="includes"></param>
            <param name="visited"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.GetSourceValue(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Collections.Generic.Dictionary{System.String,System.Func{System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object}})">
            <summary>
            Retrieve a value to be assigned to a property on the projection.
            This may mean invoking a translator, retrieving a property, or executing a method.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
            <param name="propertyName"></param>
            <param name="translators"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.ConstructIncludes(System.Collections.Generic.IEnumerable{Skyward.Popcorn.PropertyReference},System.Type,System.Type)">
            <summary>
            Verify that we have the appropriate include list for a type, taking into account any requested,
            or otherwise defaults supplied.  
            </summary>
            <param name="includes"></param>
            <param name="sourceType"></param>
            <param name="destType"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.UniqueVisit(System.Object,System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Track each object we visit to make sure we don't end up in an infinite loop
            </summary>
            <param name="source"></param>
            <param name="visited"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.CreateObjectInContext(System.Collections.Generic.Dictionary{System.String,System.Object},System.Type,System.Type)">
            <summary>
            Create an object, using any factories provided.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <param name="destType"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.ExpandCollection(System.Object,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{Skyward.Popcorn.PropertyReference},System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Map a collection of mapped types
            </summary>
            <param name="originalValue"></param>
            <param name="destinationType"></param>
            <param name="context"></param>
            <param name="includes"></param>
            <param name="visited">todo: describe visited parameter on ExpandCollection</param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.SetValueToProperty(System.Object,System.Reflection.PropertyInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},Skyward.Popcorn.PropertyReference,System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Given a value, attempt to set it to a property on a destination object.  This may involve changing the object,
            such as converting an int to a double, or an int to an int?, or expanding an object into its projection
            </summary>
            <param name="originalValue"></param>
            <param name="destinationProperty"></param>
            <param name="destinationObject"></param>
            <param name="context"></param>
            <param name="propertyReference"></param>
            <param name="visited">todo: describe visited parameter on SetValueToProperty</param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Expander.CreatePropertyReferenceList(System.Reflection.PropertyInfo,Skyward.Popcorn.PropertyReference)">
            <summary>
            Create a list of property references based on the request or defaults as declared by a property attribute.
            </summary>
            <param name="destinationProperty"></param>
            <param name="propertyReference"></param>
            <returns></returns>
        </member>
        <member name="T:Skyward.Popcorn.MappingDefinitionConfiguration`2">
            <summary>
            This is the definition of how to map one type to another, specified by the generic parameters.  This provides
            a fluent api to customize the mapping.
            It represents the overall configuration of a source tyoe, as well as the 'default destination' projection configuration.
            </summary>
            <typeparam name="TSourceType"></typeparam>
            <typeparam name="TDestType"></typeparam>
        </member>
        <member name="M:Skyward.Popcorn.MappingDefinitionConfiguration`2.PrepareProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Action{`1,System.Reflection.PropertyInfo,`0,System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Add a function-equivalent that is given the opportunity to 'prepare' a property on the source object before it is mapped to the destination.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="memberExpression"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.MappingDefinitionConfiguration`2.PrepareProperty(System.String,System.Action{System.Object,System.Reflection.PropertyInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Add a function-equivalent that is given the opportunity to 'prepare' a property on the source object before it is mapped to the destination.
            </summary>
            <param name="propName"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.MappingDefinitionConfiguration`2.BeforeExpansion(System.Action{System.Object,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Add a function-equivalent that is given the opportunity to inspect / change the source object and context before it is mapped
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Skyward.Popcorn.PopcornConfiguration">
            <summary>
            A fluent-api style configuration object for the ApiExpander
            </summary>
        </member>
        <member name="M:Skyward.Popcorn.PopcornConfiguration.SetContext(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Designate the context for this target
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.PopcornConfiguration.SetInspector(System.Func{System.Object,System.Object,System.Exception,System.Object})">
            <summary>
            Designate an inspector to run on expanded objects
            </summary>
            <param name="inspector"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.PopcornConfiguration.SetDefaultApiResponseInspector">
            <summary>
            Designate a default response inspector provided by Popcorn that handles error message/success wrapping
            </summary>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.PopcornConfiguration.SetOptIn">
            <summary>
            Set this configuration to only expand endpoints that have the ExpandResult attribute set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.PopcornConfiguration.Map``2(System.String,System.Action{Skyward.Popcorn.MappingDefinitionConfiguration{``0,``1}})">
            <summary>
            Add a mapping of a data type to a projection type
            </summary>
            <typeparam name="TSourceType"></typeparam>
            <typeparam name="TDestType"></typeparam>
            <param name="defaultIncludes"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.PopcornConfiguration.BlindHandler``2(System.Func{``0,System.Collections.Generic.Dictionary{System.String,System.Object},``1})">
            <summary>
            Register a handler to translate from an input type (or a type assignable to that) to an output type.
            </summary>
            <typeparam name="TInput">The type or interface to handle.</typeparam>
            <typeparam name="TOutput">The output format. This is mainly used for collections to create the appropriate generic collection output type.</typeparam>
            <param name="handler">The handler -- must take in the input object (which may be a subclass or concrete implementation) and return a form of the output type.</param>
            <returns>The original configuration to continue chaining requests.</returns>
        </member>
        <member name="M:Skyward.Popcorn.PopcornConfiguration.Authorize``1(System.Func{System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},``0,System.Boolean})">
            <summary>
            Attach a function that accepts the source object (if there is one), the context, and the target
            object itself.  It returns true (passed) or false (fail).  If any fails are encountered, then
            the object is not returned.
            </summary>
            <typeparam name="TSourceType"></typeparam>
            <param name="authorizer"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.PopcornConfiguration.AssignFactory``1(System.Func{``0})">
            <summary>
            Assign a factory function to create a specific type
            </summary>
            <typeparam name="TSourceType"></typeparam>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.PopcornConfiguration.AssignFactory``1(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},``0})">
            <summary>
            Assign a factory function to create a specific type from a context object
            </summary>
            <typeparam name="TSourceType"></typeparam>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.PopcornConfiguration.ScanAssemblyForMapping(System.Reflection.Assembly)">
            <summary>
            Maps all the types marked with ExpandFrom inside the given assembly
            </summary>
            <param name="assembly">The assembly to search in</param>
        </member>
        <member name="T:Skyward.Popcorn.ProjectionDefinitionConfiguration`2">
            <summary>
            This is the definition of how to map one type to another, specified by the generic parameters.  This provides
            a fluent api to customize the mapping.
            </summary>
            <typeparam name="TSourceType"></typeparam>
            <typeparam name="TDestType"></typeparam>
        </member>
        <member name="M:Skyward.Popcorn.ProjectionDefinitionConfiguration`2.Translate``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Func{`0,System.Collections.Generic.Dictionary{System.String,System.Object},``0})">
            <summary>
            Add a translation for a specific property on the destination type.
            Provide a function-equivalent that takes the source object and the context and returns data of the property type.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="memberExpression"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.ProjectionDefinitionConfiguration`2.Translate``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Object})">
            <summary>
            Add a translation for a specific property on the destination type.
            Provide a function-equivalent that takes the context and returns data of the property type.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="memberExpression"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.ProjectionDefinitionConfiguration`2.Translate``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Func{`0,System.Object})">
            <summary>
            Add a translation for a specific property on the destination type.
            Provide a function-equivalent that takes the source object and returns data of the property type.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="memberExpression"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.ProjectionDefinitionConfiguration`2.Translate``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Func{System.Object})">
            <summary>
            Add a translation for a specific property on the destination type.
            Provide a function-equivalent that returns data of the property type.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="memberExpression"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.ProjectionDefinitionConfiguration`2.TranslateByName(System.String,System.Func{System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object})">
            <summary>
            Add a translation for a specific property by name on the destination type.
            Provide a function-equivalent that returns data of the property type or an assignable equivalent. 
            </summary>
            <param name="propName"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.ProjectionDefinitionConfiguration`2.AfterExpansion(System.Action{System.Object,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Add a function-equivalent that is given the opportunity to inspect / change the source object and context after it is mapped
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.ProjectionDefinitionConfiguration`2.Handle(System.Func{System.Object,System.Collections.Generic.IEnumerable{Skyward.Popcorn.PropertyReference},System.Collections.Generic.Dictionary{System.String,System.Object},Skyward.Popcorn.MappingDefinition,Skyward.Popcorn.ProjectionDefinition,System.Object})">
            <summary>
            Assign a function-equivalent that handles the entire projection
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.ProjectionDefinitionConfiguration`2.AlternativeMap``1(System.String,System.Action{Skyward.Popcorn.ProjectionDefinitionConfiguration{`0,``0}})">
            <summary>
            Add an alternative mapping destination type, and provide the opportunity to customize that.
            </summary>
            <typeparam name="TNewDestType"></typeparam>
            <param name="defaultIncludes"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:Skyward.Popcorn.PropertyReference">
            <summary>
            This describes a property to be referenced (by name) and an optional (recursive) list of properties to be referenced on the 
            property's value if it is a complex type.
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.PropertyReference.PropertyName">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.PropertyReference.Children">
            <summary>
            Any properties to reference on this property's value
            </summary>
        </member>
        <member name="M:Skyward.Popcorn.PropertyReference.Parse(System.String)">
            <summary>
            Helper method to take a string in the format "[name[subname1, subname2, ...],...]" and create a PropertyReference tree out of it.
            </summary>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.PropertyReference.CompareAndConstructDefaultIncludes(System.Collections.Generic.List{Skyward.Popcorn.PropertyReference},System.Reflection.TypeInfo)">
            <summary>
            A function to validate and apply the attribute level or mapping level defaults for a projected entity
            </summary>
            <param name="parsedDefaultIncludes"></param>
            <param name="destTypeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.PropertyReference.DeconstructDefaultIncludes(System.Collections.Generic.List{Skyward.Popcorn.PropertyReference},System.Reflection.TypeInfo,System.Collections.Generic.List{Skyward.Popcorn.PropertyReference})">
            <summary>
            A function to specifically deconstruct the default includes off of a type info
            </summary>
            <param name="parsedDefaultIncludes"></param>
            <param name="destTypeInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Skyward.Popcorn.ApiResponse">
            <summary>
                A generic response object
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ApiResponse.Success">
            <summary>
                Whether or not the method succeeded.
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ApiResponse.Data">
            <summary>
                The generic response object provided on success.
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ApiResponse.ErrorCode">
            <summary>
                If the method did not succeed, the type name of the exception.
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ApiResponse.ErrorMessage">
            <summary>
                If the method did not succeed, the human-readable message of the error returned.
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ApiResponse.ErrorDetails">
            <summary>
            If the method did not succeed, this may contain additional details for debugging or reporting purposes.
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ApiResponse`1.Success">
            <summary>
                Whether or not the method succeeded.
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ApiResponse`1.Data">
            <summary>
                The generic response object provided on success.
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ApiResponse`1.ErrorCode">
            <summary>
                If the method did not succeed, the type name of the exception.
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ApiResponse`1.ErrorMessage">
            <summary>
                If the method did not succeed, the human-readable message of the error returned.
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ApiResponse`1.ErrorDetails">
            <summary>
            If the method did not succeed, this may contain additional details for debugging or reporting purposes.
            </summary>
        </member>
        <member name="T:Skyward.Popcorn.ExpandFromAttribute">
            <summary>
            This attribute is used to mark classes for automatic Mapping by PopcornConfiguration
            </summary>
        </member>
        <member name="T:Skyward.Popcorn.IncludeByDefault">
            <summary>
            This attribute is used to mark properties to be included by default at the main entity level
            </summary>
        </member>
        <member name="T:Skyward.Popcorn.InternalOnlyAttribute">
            <summary>
            This attribute is used to mark methods, classes, or properties as unable to be passed to any client by Popcorn
            </summary>
        </member>
        <member name="T:Skyward.Popcorn.SubPropertyIncludeByDefault">
            <summary>
            This attribute is used to mark properties of a subordinate entity to be included by default
            Applying this attribute will overwrite any default includes at the main entity projection level
            </summary>
        </member>
        <member name="T:Skyward.Popcorn.MappingDefinition">
            <summary>
            This is the definition of how to map one type to another using the expander.  You can, but probably
            shouldn't create this directly.  Instead, use PopcornConfiguration.
            </summary>
        </member>
        <member name="F:Skyward.Popcorn.MappingDefinition.DefaultDestinationType">
            <summary>
            The type to project to when nothing is specified
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.MappingDefinition.PrepareProperties">
            <summary>
            Any actions to handle specific properties on the source type
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.MappingDefinition.BeforeExpansion">
            <summary>
            Any actions to handle source objects before they are expanded
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.MappingDefinition.Authorizers">
            <summary>
            Any actions to verify that an object is authorized in the current context
            </summary>
        </member>
        <member name="F:Skyward.Popcorn.MappingDefinition.Destinations">
            <summary>
            Available destination types
            </summary>
        </member>
        <member name="M:Skyward.Popcorn.MappingDefinition.DefaultDestination">
            <summary>
            The type to project to if a specific one isn't requested
            </summary>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.MappingDefinition.DestinationForType(System.Type)">
            <summary>
            Get the projection definition for a specific destination type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.MappingDefinition.DestinationForType``1">
            <summary>
            Get the projection definition for a specific destination type (generic)
            </summary>
            <typeparam name="TDest"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Skyward.Popcorn.ProjectionDefinition.DestinationType">
            <summary>
            The type to map to
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ProjectionDefinition.Translators">
            <summary>
            Any functions to handle specific properties on the destination type
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ProjectionDefinition.AfterExpansion">
            <summary>
            Any actions to handle source objects after they are expanded
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ProjectionDefinition.DefaultIncludes">
            <summary>
            The list of includes to use if none are explicitly requested
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.ProjectionDefinition.Handler">
            <summary>
            A handler that simply executes the projection.  Useful if the result isn't a complex object.
            </summary>
        </member>
        <member name="T:Skyward.Popcorn.MultipleDefaultsException">
            <summary>
            This exception is for defaults being declared in the mapping function and at the attribute level on a projection
            </summary>
        </member>
        <member name="T:Skyward.Popcorn.PropertyInfoExtensions">
            <summary>
            Provides utility extensions for the PropertyInfo type.
            </summary>
        </member>
        <member name="M:Skyward.Popcorn.PropertyInfoExtensions.TrySetValueHandleConvert(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Set a value to a property on an object.  This will handle: converting types (eg int -> double) and nullable properties (int -> int?)
            </summary>
            <param name="propertyInfo"></param>
            <param name="inputObject"></param>
            <param name="propertyVal"></param>
            <returns></returns>
        </member>
        <member name="T:Skyward.Popcorn.TypeExtensions">
            <summary>
            Provides extensions to 'Type' for the expander to use
            </summary>
        </member>
        <member name="M:Skyward.Popcorn.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            Is this type a Nullable instance?
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.TypeExtensions.CreateDefaultObject(System.Type)">
            <summary>
            Do our best to construct an object of the given type.
            This will look for public constructors:
                That take an source type and Context Type
                That take a Context Type
                That take an source type Type
                That take no parameters
            </summary>
            <param name="destinationType"></param>
            <param name="source"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
    </members>
</doc>
