<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PopcornNetStandard</name>
    </assembly>
    <members>
        <member name="M:Skyward.Popcorn.Abstractions.PopcornFactory.Popcorn.EnforceUniqueVisit(System.Object)">
            <summary>
            Track each object we visit to make sure we don't end up in an infinite loop
            </summary>
            <param name="source"></param>
            <param name="visited"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.Abstractions.PopcornFactory.Popcorn.AuthorizeValue(System.Object,System.Object)">
            <summary>
            Test if an object is authorized in a given context, from the given source.
            Source may be an object (if value was from a property) or the collection 
            (if value is contained within it).
            </summary>
            <param name="source"></param>
            <param name="context"></param>
            <param name="valueToAssign"></param>
            <returns>True if authorized, false if rejected</returns>
        </member>
        <member name="M:Skyward.Popcorn.Abstractions.PopcornFactory.Popcorn.GetSourceValue(System.Object,System.String)">
            <summary>
            Retrieve a value to be assigned to a property on the projection.
            This may mean invoking a translator, retrieving a property, or executing a method.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
            <param name="propertyName"></param>
            <param name="translators"></param>
            <returns></returns>
        </member>
        <member name="T:Skyward.Popcorn.PropertyReference">
            <summary>
            This describes a property to be referenced (by name) and an optional (recursive) list of properties to be referenced on the 
            property's value if it is a complex type.
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.PropertyReference.PropertyName">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="P:Skyward.Popcorn.PropertyReference.Children">
            <summary>
            Any properties to reference on this property's value
            </summary>
        </member>
        <member name="M:Skyward.Popcorn.PropertyReference.Parse(System.String)">
            <summary>
            Helper method to take a string in the format "[name[subname1, subname2, ...],...]" and create a PropertyReference tree out of it.
            </summary>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.PropertyReference.CompareAndConstructDefaultIncludes(System.Collections.Generic.List{Skyward.Popcorn.PropertyReference},System.Reflection.TypeInfo)">
            <summary>
            A function to validate and apply the attribute level or mapping level defaults for a projected entity
            </summary>
            <param name="parsedDefaultIncludes"></param>
            <param name="destTypeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.PropertyReference.DeconstructDefaultIncludes(System.Collections.Generic.List{Skyward.Popcorn.PropertyReference},System.Reflection.TypeInfo,System.Collections.Generic.List{Skyward.Popcorn.PropertyReference})">
            <summary>
            A function to specifically deconstruct the default includes off of a type info
            </summary>
            <param name="parsedDefaultIncludes"></param>
            <param name="destTypeInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Skyward.Popcorn.IncludeByDefault">
            <summary>
            This attribute is used to mark properties to be included by default at the main entity level
            </summary>
        </member>
        <member name="T:Skyward.Popcorn.InternalOnlyAttribute">
            <summary>
            This attribute is used to mark methods, classes, or properties as unable to be passed to any client by Popcorn
            </summary>
        </member>
        <member name="T:Skyward.Popcorn.SubPropertyIncludeByDefault">
            <summary>
            This attribute is used to mark properties of a subordinate entity to be included by default
            Applying this attribute will overwrite any default includes at the main entity projection level
            </summary>
        </member>
        <member name="T:Skyward.Popcorn.PropertyInfoExtensions">
            <summary>
            Provides utility extensions for the PropertyInfo type.
            </summary>
        </member>
        <member name="M:Skyward.Popcorn.PropertyInfoExtensions.TrySetValueHandleConvert(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Set a value to a property on an object.  This will handle: converting types (eg int -> double) and nullable properties (int -> int?)
            </summary>
            <param name="propertyInfo"></param>
            <param name="inputObject"></param>
            <param name="propertyVal"></param>
            <returns></returns>
        </member>
        <member name="T:Skyward.Popcorn.TypeExtensions">
            <summary>
            Provides extensions to 'Type' for the expander to use
            </summary>
        </member>
        <member name="M:Skyward.Popcorn.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            Is this type a Nullable instance?
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Skyward.Popcorn.TypeExtensions.CreateDefaultObject(System.Type)">
            <summary>
            Do our best to construct an object of the given type.
            This will look for public constructors:
                That take an source type and Context Type
                That take a Context Type
                That take an source type Type
                That take no parameters
            </summary>
            <param name="destinationType"></param>
            <param name="source"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
    </members>
</doc>
